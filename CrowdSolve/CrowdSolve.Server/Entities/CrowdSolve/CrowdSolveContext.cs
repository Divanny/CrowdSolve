// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace CrowdSolve.Server.Entities.CrowdSolve;

public partial class CrowdSolveContext : DbContext
{
    public CrowdSolveContext(DbContextOptions<CrowdSolveContext> options)
        : base(options)
    {
    }

    public virtual DbSet<CredencialesAutenticacion> CredencialesAutenticacion { get; set; }

    public virtual DbSet<EstatusUsuarios> EstatusUsuarios { get; set; }

    public virtual DbSet<Identificaciones> Identificaciones { get; set; }

    public virtual DbSet<LogActividades> LogActividades { get; set; }

    public virtual DbSet<LogErrores> LogErrores { get; set; }

    public virtual DbSet<MetodosAutenticacion> MetodosAutenticacion { get; set; }

    public virtual DbSet<Participantes> Participantes { get; set; }

    public virtual DbSet<Perfiles> Perfiles { get; set; }

    public virtual DbSet<PerfilesVistas> PerfilesVistas { get; set; }

    public virtual DbSet<TiposIdentificacion> TiposIdentificacion { get; set; }

    public virtual DbSet<Usuarios> Usuarios { get; set; }

    public virtual DbSet<Vistas> Vistas { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<CredencialesAutenticacion>(entity =>
        {
            entity.HasKey(e => e.idCredencial);

            entity.Property(e => e.TokenAcceso).IsUnicode(false);
            entity.Property(e => e.idExterno)
                .HasMaxLength(256)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EstatusUsuarios>(entity =>
        {
            entity.HasKey(e => e.idEstatusUsuario);

            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Identificaciones>(entity =>
        {
            entity.HasKey(e => e.idIdentificacion);

            entity.Property(e => e.Valor)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LogActividades>(entity =>
        {
            entity.HasKey(e => e.idLogActividad);

            entity.Property(e => e.Data)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.Metodo)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.URL)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LogErrores>(entity =>
        {
            entity.HasKey(e => e.idLogError);

            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.Fuente)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Mensaje)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.StackTrace)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<MetodosAutenticacion>(entity =>
        {
            entity.HasKey(e => e.idMetodoAutenticacion);

            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Participantes>(entity =>
        {
            entity.HasKey(e => e.idParticipante);

            entity.Property(e => e.Apellidos)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Nombres)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Perfiles>(entity =>
        {
            entity.HasKey(e => e.idPerfil);

            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PerfilesVistas>(entity =>
        {
            entity.HasKey(e => e.idPerfilVista);
        });

        modelBuilder.Entity<TiposIdentificacion>(entity =>
        {
            entity.HasKey(e => e.idTipoIdentificacion);

            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Usuarios>(entity =>
        {
            entity.HasKey(e => e.idUsuario);

            entity.Property(e => e.Contraseña)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.FechaRegistro).HasColumnType("datetime");
            entity.Property(e => e.NombreUsuario)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Vistas>(entity =>
        {
            entity.HasKey(e => e.idVista);

            entity.Property(e => e.ClaseIcono)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.URL)
                .IsRequired()
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}